// Code generated by MockGen. DO NOT EDIT.
// Source: notificationEvent/repository.go

// Package mock_notificationevent is a generated GoMock package.
package mock_notificationevent

import (
	reflect "reflect"

	notificationevent "github.com/erickkimura7/daily-remember/notificationEvent"
	gomock "github.com/golang/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockNotificationRepository) AddEvent(events *notificationevent.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", events)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockNotificationRepositoryMockRecorder) AddEvent(events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockNotificationRepository)(nil).AddEvent), events)
}

// FindAllEvents mocks base method.
func (m *MockNotificationRepository) FindAllEvents() ([]*notificationevent.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllEvents")
	ret0, _ := ret[0].([]*notificationevent.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllEvents indicates an expected call of FindAllEvents.
func (mr *MockNotificationRepositoryMockRecorder) FindAllEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllEvents", reflect.TypeOf((*MockNotificationRepository)(nil).FindAllEvents))
}

// FindEventById mocks base method.
func (m *MockNotificationRepository) FindEventById(id string) (*notificationevent.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventById", id)
	ret0, _ := ret[0].(*notificationevent.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventById indicates an expected call of FindEventById.
func (mr *MockNotificationRepositoryMockRecorder) FindEventById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventById", reflect.TypeOf((*MockNotificationRepository)(nil).FindEventById), id)
}

// RemoveEventById mocks base method.
func (m *MockNotificationRepository) RemoveEventById(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEventById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEventById indicates an expected call of RemoveEventById.
func (mr *MockNotificationRepositoryMockRecorder) RemoveEventById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventById", reflect.TypeOf((*MockNotificationRepository)(nil).RemoveEventById), id)
}
